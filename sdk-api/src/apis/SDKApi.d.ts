/**
 * Dashboard API
 * Dashboard API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CompletePasskeyRecoveryRequest, ConnectRequest, CreateEmbeddedWalletsRequest, Currency, EmailProviderResponse, EmailVerificationCreateRequest, EmailVerificationCreateResponse, EmailVerificationRetryRequest, EmailVerificationVerifyRequest, ExportEmbeddedWalletResponse, GetUserPasskeysResponse, HealthcheckResponse, InitEmailAuthRequest, InitEmailAuthResponse, InitPasskeyRecoveryRequest, InitPasskeyRecoveryResponse, JwksResponse, NetworkConfigurationResponse, NonceResponse, OauthProviderLoginUrl, OauthRequest, OauthResultRequest, OauthResultResponse, PrefetchRequest, ProjectSettings, ProviderEnum, PublishEvents, SdkSettingsRequest, SupportedOnrampsResponse, UpdateSelfResponse, UpdateUserPasskeyRequest, UserFields, UserPasskey, VerifyRequest, VerifyResponse, VerifyUnlinkRequest } from '../models';
export interface CompletePasskeyRecoveryOperationRequest {
    environmentId: string;
    completePasskeyRecoveryRequest: CompletePasskeyRecoveryRequest;
}
export interface CreateEmailVerificationRequest {
    environmentId: string;
    emailVerificationCreateRequest: EmailVerificationCreateRequest;
}
export interface CreateEmailVerificationOptionsRequest {
    environmentId: string;
}
export interface CreateEmbeddedWalletsOperationRequest {
    environmentId: string;
    createEmbeddedWalletsRequest: CreateEmbeddedWalletsRequest;
}
export interface CreateEmbeddedWalletsOptionsRequest {
    environmentId: string;
}
export interface CreateVisitRequest {
    environmentId: string;
    connectRequest: ConnectRequest;
}
export interface EmailAuthOptionsRequest {
    environmentId: string;
}
export interface EmailProviderOptionsRequest {
    environmentId: string;
}
export interface EmbeddedWalletExportRequest {
    environmentId: string;
    walletId: string;
    activityId: string;
}
export interface EmbeddedWalletExportOptionsRequest {
    environmentId: string;
    walletId: string;
    activityId: string;
}
export interface EventsOptionsRequest {
    environmentId: string;
}
export interface GetEmailProviderRequest {
    environmentId: string;
    email: string;
}
export interface GetEnvironmentSettingsRequest {
    environmentId: string;
}
export interface GetHealthcheckRequest {
    environmentId: string;
}
export interface GetHealthcheckOptionsRequest {
    environmentId: string;
}
export interface GetJwksByEnvironmentIdRequest {
    environmentId: string;
}
export interface GetNetworksConfigurationByEnvIdRequest {
    environmentId: string;
}
export interface GetNonceRequest {
    environmentId: string;
}
export interface GetSupportedOnrampsRequest {
    environmentId: string;
    walletAddress: string;
    chain: string;
    networkId?: string;
    token?: string;
}
export interface GetUserPasskeysRequest {
    environmentId: string;
}
export interface InitEmailAuthOperationRequest {
    environmentId: string;
    initEmailAuthRequest: InitEmailAuthRequest;
}
export interface InitPasskeyRecoveryOperationRequest {
    environmentId: string;
    initPasskeyRecoveryRequest: InitPasskeyRecoveryRequest;
}
export interface JwksOptionsRequest {
    environmentId: string;
}
export interface LogDynamicSdkSettingsRequest {
    environmentId: string;
    sdkSettingsRequest: SdkSettingsRequest;
}
export interface MergeUsersRequest {
    environmentId: string;
}
export interface MergeUsersOptionsRequest {
    environmentId: string;
}
export interface NetworksOptionsRequest {
    environmentId: string;
}
export interface NonceOptionsRequest {
    environmentId: string;
}
export interface OauthAuthorizeHtmlRequest {
    environmentId: string;
    providerType: ProviderEnum;
    scope?: string;
    state?: string;
    redirectUri?: string;
}
export interface OauthAuthorizeHtmlOptionsRequest {
    environmentId: string;
    providerType: ProviderEnum;
}
export interface OauthLoginRequest {
    environmentId: string;
    providerType: ProviderEnum;
}
export interface OauthLoginOptionsRequest {
    environmentId: string;
    providerType: ProviderEnum;
}
export interface OauthLoginUrlRequest {
    environmentId: string;
    providerType: ProviderEnum;
}
export interface OauthLoginUrlOptionsRequest {
    environmentId: string;
    providerType: ProviderEnum;
}
export interface OauthRedirectRequest {
    environmentId: string;
    providerType: ProviderEnum;
    code?: string;
    state?: string;
    idToken?: string;
    error?: string;
}
export interface OauthRedirectCodeRequest {
    environmentId: string;
    providerType: ProviderEnum;
    code?: string;
    scope?: string;
    state?: string;
    authuser?: string;
    prompt?: string;
    error?: string;
}
export interface OauthRedirectOptionsRequest {
    environmentId: string;
    providerType: ProviderEnum;
}
export interface OauthResultOperationRequest {
    environmentId: string;
    providerType: ProviderEnum;
    oauthResultRequest: OauthResultRequest;
}
export interface OauthResultOptionsRequest {
    environmentId: string;
    providerType: ProviderEnum;
}
export interface OauthSignInRequest {
    environmentId: string;
    providerType: ProviderEnum;
    oauthRequest: OauthRequest;
}
export interface OauthSignInOptionsRequest {
    environmentId: string;
    providerType: ProviderEnum;
}
export interface OauthVerifyRequest {
    environmentId: string;
    providerType: ProviderEnum;
    oauthRequest: OauthRequest;
}
export interface OauthVerifyOptionsRequest {
    environmentId: string;
    providerType: ProviderEnum;
}
export interface OnrampsOptionsRequest {
    environmentId: string;
}
export interface OptionsConnectRequest {
    environmentId: string;
}
export interface PasskeyRecoveryOptionsRequest {
    environmentId: string;
}
export interface PrefetchOperationRequest {
    environmentId: string;
    prefetchRequest: PrefetchRequest;
}
export interface PublishEventRequest {
    environmentId: string;
    publishEvents: PublishEvents;
}
export interface RefreshAuthRequest {
    environmentId: string;
}
export interface RefreshOptionsRequest {
    environmentId: string;
}
export interface RetryEmailVerificationRequest {
    environmentId: string;
    emailVerificationRetryRequest: EmailVerificationRetryRequest;
}
export interface RetryEmailVerificationOptionsRequest {
    environmentId: string;
}
export interface RevokeSessionRequest {
    environmentId: string;
}
export interface RevokeSessionOptionRequest {
    environmentId: string;
}
export interface SdkSettingsOptionsRequest {
    environmentId: string;
}
export interface SettingsOptionsRequest {
    environmentId: string;
}
export interface SignInWithEmailVerificationRequest {
    environmentId: string;
    emailVerificationVerifyRequest: EmailVerificationVerifyRequest;
}
export interface SignInWithEmailVerificationOptionsRequest {
    environmentId: string;
}
export interface UpdatePasskeyRequest {
    environmentId: string;
    updateUserPasskeyRequest: UpdateUserPasskeyRequest;
}
export interface UpdateSelfRequest {
    environmentId: string;
    userFields: UserFields;
}
export interface UserPasskeysOptionsRequest {
    environmentId: string;
}
export interface UsersOptionsRequest {
    environmentId: string;
}
export interface VerifyOperationRequest {
    environmentId: string;
    verifyRequest: VerifyRequest;
}
export interface VerifyEmailVerificationRequest {
    environmentId: string;
    emailVerificationVerifyRequest: EmailVerificationVerifyRequest;
}
export interface VerifyEmailVerificationOptionsRequest {
    environmentId: string;
}
export interface VerifyLinkRequest {
    environmentId: string;
    verifyRequest: VerifyRequest;
}
export interface VerifyLinkOptionsRequest {
    environmentId: string;
}
export interface VerifyOptionsRequest {
    environmentId: string;
}
export interface VerifyPrefetchRequest {
    environmentId: string;
}
export interface VerifyTransferRequest {
    environmentId: string;
    verifyRequest: VerifyRequest;
}
export interface VerifyTransferOptionsRequest {
    environmentId: string;
}
export interface VerifyUnlinkOperationRequest {
    environmentId: string;
    verifyUnlinkRequest: VerifyUnlinkRequest;
}
export interface VerifyUnlinkOptionsRequest {
    environmentId: string;
}
/**
 *
 */
export declare class SDKApi extends runtime.BaseAPI {
    /**
     * Completes the passkey recovery process for a user\'s passkey embedded wallet
     * Completes the passkey recovery process for a user\'s passkey embedded wallet
     */
    completePasskeyRecoveryRaw(requestParameters: CompletePasskeyRecoveryOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Completes the passkey recovery process for a user\'s passkey embedded wallet
     * Completes the passkey recovery process for a user\'s passkey embedded wallet
     */
    completePasskeyRecovery(requestParameters: CompletePasskeyRecoveryOperationRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Initialize email verification process
     */
    createEmailVerificationRaw(requestParameters: CreateEmailVerificationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EmailVerificationCreateResponse>>;
    /**
     * Initialize email verification process
     */
    createEmailVerification(requestParameters: CreateEmailVerificationRequest, initOverrides?: RequestInit): Promise<EmailVerificationCreateResponse>;
    /**
     * Options call for this endpoint
     */
    createEmailVerificationOptionsRaw(requestParameters: CreateEmailVerificationOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    createEmailVerificationOptions(requestParameters: CreateEmailVerificationOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Create one or more embedded wallets for a user
     * Create one or more new embedded wallets for a user
     */
    createEmbeddedWalletsRaw(requestParameters: CreateEmbeddedWalletsOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Create one or more embedded wallets for a user
     * Create one or more new embedded wallets for a user
     */
    createEmbeddedWallets(requestParameters: CreateEmbeddedWalletsOperationRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    createEmbeddedWalletsOptionsRaw(requestParameters: CreateEmbeddedWalletsOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    createEmbeddedWalletsOptions(requestParameters: CreateEmbeddedWalletsOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Endpoint to send minimal wallet information for a connect-only or connect-first visitor.
     * Create a visit
     */
    createVisitRaw(requestParameters: CreateVisitRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Endpoint to send minimal wallet information for a connect-only or connect-first visitor.
     * Create a visit
     */
    createVisit(requestParameters: CreateVisitRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    emailAuthOptionsRaw(requestParameters: EmailAuthOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    emailAuthOptions(requestParameters: EmailAuthOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    emailProviderOptionsRaw(requestParameters: EmailProviderOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    emailProviderOptions(requestParameters: EmailProviderOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Requests an export of an embedded wallet
     * Requests an export of an embedded wallet
     */
    embeddedWalletExportRaw(requestParameters: EmbeddedWalletExportRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ExportEmbeddedWalletResponse>>;
    /**
     * Requests an export of an embedded wallet
     * Requests an export of an embedded wallet
     */
    embeddedWalletExport(requestParameters: EmbeddedWalletExportRequest, initOverrides?: RequestInit): Promise<ExportEmbeddedWalletResponse>;
    /**
     * Options call for this endpoint
     */
    embeddedWalletExportOptionsRaw(requestParameters: EmbeddedWalletExportOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    embeddedWalletExportOptions(requestParameters: EmbeddedWalletExportOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     */
    eventsOptionsRaw(requestParameters: EventsOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     */
    eventsOptions(requestParameters: EventsOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Return the email provider to be used for signing in with a given email. If an external provider such as magicLink is disabled, this endpoint would return emailOnly. If an external provider such as magicLink is enabled, it will return emailOnly when the email already exists in Dynamic and it is associated with a wallet, otherwise it will return magicLink.
     * Get signin email provider
     */
    getEmailProviderRaw(requestParameters: GetEmailProviderRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EmailProviderResponse>>;
    /**
     * Return the email provider to be used for signing in with a given email. If an external provider such as magicLink is disabled, this endpoint would return emailOnly. If an external provider such as magicLink is enabled, it will return emailOnly when the email already exists in Dynamic and it is associated with a wallet, otherwise it will return magicLink.
     * Get signin email provider
     */
    getEmailProvider(requestParameters: GetEmailProviderRequest, initOverrides?: RequestInit): Promise<EmailProviderResponse>;
    /**
     * Get the environment\'s settings
     */
    getEnvironmentSettingsRaw(requestParameters: GetEnvironmentSettingsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectSettings>>;
    /**
     * Get the environment\'s settings
     */
    getEnvironmentSettings(requestParameters: GetEnvironmentSettingsRequest, initOverrides?: RequestInit): Promise<ProjectSettings>;
    /**
     * Exchange rates for the given currency
     */
    getExchangeRatesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Currency>>>;
    /**
     * Exchange rates for the given currency
     */
    getExchangeRates(initOverrides?: RequestInit): Promise<Array<Currency>>;
    /**
     * Options call for this endpoint
     */
    getExchangeRatesOptionsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    getExchangeRatesOptions(initOverrides?: RequestInit): Promise<void>;
    /**
     * Health check endpoint to check for uptime of API.
     */
    getHealthcheckRaw(requestParameters: GetHealthcheckRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<HealthcheckResponse>>;
    /**
     * Health check endpoint to check for uptime of API.
     */
    getHealthcheck(requestParameters: GetHealthcheckRequest, initOverrides?: RequestInit): Promise<HealthcheckResponse>;
    /**
     * Options call for this endpoint
     */
    getHealthcheckOptionsRaw(requestParameters: GetHealthcheckOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    getHealthcheckOptions(requestParameters: GetHealthcheckOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Find jwks for public key
     */
    getJwksByEnvironmentIdRaw(requestParameters: GetJwksByEnvironmentIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<JwksResponse>>;
    /**
     * Find jwks for public key
     */
    getJwksByEnvironmentId(requestParameters: GetJwksByEnvironmentIdRequest, initOverrides?: RequestInit): Promise<JwksResponse>;
    /**
     * Find the configuration for the enabled networks associated to an environment
     */
    getNetworksConfigurationByEnvIdRaw(requestParameters: GetNetworksConfigurationByEnvIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<NetworkConfigurationResponse>>>;
    /**
     * Find the configuration for the enabled networks associated to an environment
     */
    getNetworksConfigurationByEnvId(requestParameters: GetNetworksConfigurationByEnvIdRequest, initOverrides?: RequestInit): Promise<Array<NetworkConfigurationResponse>>;
    /**
     * Create nonce for authentication flow
     */
    getNonceRaw(requestParameters: GetNonceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NonceResponse>>;
    /**
     * Create nonce for authentication flow
     */
    getNonce(requestParameters: GetNonceRequest, initOverrides?: RequestInit): Promise<NonceResponse>;
    /**
     * Find the configuration for the enabled onramps associated to an environment
     * Configuration for enabled onramps
     */
    getSupportedOnrampsRaw(requestParameters: GetSupportedOnrampsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SupportedOnrampsResponse>>;
    /**
     * Find the configuration for the enabled onramps associated to an environment
     * Configuration for enabled onramps
     */
    getSupportedOnramps(requestParameters: GetSupportedOnrampsRequest, initOverrides?: RequestInit): Promise<SupportedOnrampsResponse>;
    /**
     * Gets passkey data associated with a user
     */
    getUserPasskeysRaw(requestParameters: GetUserPasskeysRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetUserPasskeysResponse>>;
    /**
     * Gets passkey data associated with a user
     */
    getUserPasskeys(requestParameters: GetUserPasskeysRequest, initOverrides?: RequestInit): Promise<GetUserPasskeysResponse>;
    /**
     * Initialize the email authentication process for a user\'s embedded wallet
     * Initialize the email authentication process for a user\'s embedded wallet
     */
    initEmailAuthRaw(requestParameters: InitEmailAuthOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InitEmailAuthResponse>>;
    /**
     * Initialize the email authentication process for a user\'s embedded wallet
     * Initialize the email authentication process for a user\'s embedded wallet
     */
    initEmailAuth(requestParameters: InitEmailAuthOperationRequest, initOverrides?: RequestInit): Promise<InitEmailAuthResponse>;
    /**
     * Initialize the passkey recovery process for a user\'s passkey embedded wallet
     * Initialize the passkey recovery process for a user\'s passkey embedded wallet
     */
    initPasskeyRecoveryRaw(requestParameters: InitPasskeyRecoveryOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InitPasskeyRecoveryResponse>>;
    /**
     * Initialize the passkey recovery process for a user\'s passkey embedded wallet
     * Initialize the passkey recovery process for a user\'s passkey embedded wallet
     */
    initPasskeyRecovery(requestParameters: InitPasskeyRecoveryOperationRequest, initOverrides?: RequestInit): Promise<InitPasskeyRecoveryResponse>;
    /**
     * Options call for this endpoint
     */
    jwksOptionsRaw(requestParameters: JwksOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    jwksOptions(requestParameters: JwksOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Update SDK settings for a specific environment
     */
    logDynamicSdkSettingsRaw(requestParameters: LogDynamicSdkSettingsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Update SDK settings for a specific environment
     */
    logDynamicSdkSettings(requestParameters: LogDynamicSdkSettingsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Used to merge two owned accounts connected by email address
     * After successful verification allow to merge two owned accounts
     */
    mergeUsersRaw(requestParameters: MergeUsersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Used to merge two owned accounts connected by email address
     * After successful verification allow to merge two owned accounts
     */
    mergeUsers(requestParameters: MergeUsersRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    mergeUsersOptionsRaw(requestParameters: MergeUsersOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    mergeUsersOptions(requestParameters: MergeUsersOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    networksOptionsRaw(requestParameters: NetworksOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    networksOptions(requestParameters: NetworksOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    nonceOptionsRaw(requestParameters: NonceOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    nonceOptions(requestParameters: NonceOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Endpoint where an oauth provider would return authorization HTML used for mobile-friendly login, such as Apple ID with Touch ID on enabled devices.
     * Oauth provider authorization endpoint
     */
    oauthAuthorizeHtmlRaw(requestParameters: OauthAuthorizeHtmlRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>>;
    /**
     * Endpoint where an oauth provider would return authorization HTML used for mobile-friendly login, such as Apple ID with Touch ID on enabled devices.
     * Oauth provider authorization endpoint
     */
    oauthAuthorizeHtml(requestParameters: OauthAuthorizeHtmlRequest, initOverrides?: RequestInit): Promise<string>;
    /**
     * Options call for this endpoint
     */
    oauthAuthorizeHtmlOptionsRaw(requestParameters: OauthAuthorizeHtmlOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    oauthAuthorizeHtmlOptions(requestParameters: OauthAuthorizeHtmlOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Get redirect URL for Oauth provider login
     */
    oauthLoginRaw(requestParameters: OauthLoginRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Get redirect URL for Oauth provider login
     */
    oauthLogin(requestParameters: OauthLoginRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    oauthLoginOptionsRaw(requestParameters: OauthLoginOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    oauthLoginOptions(requestParameters: OauthLoginOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Get redirect URL for Oauth provider login. This will return a string that the SDK can manipulate before redirecting the browser to.
     */
    oauthLoginUrlRaw(requestParameters: OauthLoginUrlRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OauthProviderLoginUrl>>;
    /**
     * Get redirect URL for Oauth provider login. This will return a string that the SDK can manipulate before redirecting the browser to.
     */
    oauthLoginUrl(requestParameters: OauthLoginUrlRequest, initOverrides?: RequestInit): Promise<OauthProviderLoginUrl>;
    /**
     * Options call for this endpoint
     */
    oauthLoginUrlOptionsRaw(requestParameters: OauthLoginUrlOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    oauthLoginUrlOptions(requestParameters: OauthLoginUrlOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Endpoint where an oauth provider would redirect after a successful user authorizing the oauth application.
     * Oauth provider redirect endpoint for apple ID
     */
    oauthRedirectRaw(requestParameters: OauthRedirectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>>;
    /**
     * Endpoint where an oauth provider would redirect after a successful user authorizing the oauth application.
     * Oauth provider redirect endpoint for apple ID
     */
    oauthRedirect(requestParameters: OauthRedirectRequest, initOverrides?: RequestInit): Promise<string>;
    /**
     * Endpoint where an oauth provider would redirect after a successful user authorizing the oauth application.
     * Oauth provider redirect endpoint
     */
    oauthRedirectCodeRaw(requestParameters: OauthRedirectCodeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>>;
    /**
     * Endpoint where an oauth provider would redirect after a successful user authorizing the oauth application.
     * Oauth provider redirect endpoint
     */
    oauthRedirectCode(requestParameters: OauthRedirectCodeRequest, initOverrides?: RequestInit): Promise<string>;
    /**
     * Options call for this endpoint
     */
    oauthRedirectOptionsRaw(requestParameters: OauthRedirectOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    oauthRedirectOptions(requestParameters: OauthRedirectOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Returns the authorization code or error retuned by oauth provider
     */
    oauthResultRaw(requestParameters: OauthResultOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OauthResultResponse>>;
    /**
     * Returns the authorization code or error retuned by oauth provider
     */
    oauthResult(requestParameters: OauthResultOperationRequest, initOverrides?: RequestInit): Promise<OauthResultResponse>;
    /**
     * Options call for this endpoint
     */
    oauthResultOptionsRaw(requestParameters: OauthResultOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    oauthResultOptions(requestParameters: OauthResultOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Standard OAuth SignIn callback to exchange temproary code for oauth access and return a valid Dynamic JWT and user
     * Oauth provider SignIn endpoint
     */
    oauthSignInRaw(requestParameters: OauthSignInRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Standard OAuth SignIn callback to exchange temproary code for oauth access and return a valid Dynamic JWT and user
     * Oauth provider SignIn endpoint
     */
    oauthSignIn(requestParameters: OauthSignInRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    oauthSignInOptionsRaw(requestParameters: OauthSignInOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    oauthSignInOptions(requestParameters: OauthSignInOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Standard OAuth verify callback to exchange temproary code for oauth access
     * Oauth provider verify endpoint
     */
    oauthVerifyRaw(requestParameters: OauthVerifyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Standard OAuth verify callback to exchange temproary code for oauth access
     * Oauth provider verify endpoint
     */
    oauthVerify(requestParameters: OauthVerifyRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    oauthVerifyOptionsRaw(requestParameters: OauthVerifyOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    oauthVerifyOptions(requestParameters: OauthVerifyOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    onrampsOptionsRaw(requestParameters: OnrampsOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    onrampsOptions(requestParameters: OnrampsOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    optionsConnectRaw(requestParameters: OptionsConnectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    optionsConnect(requestParameters: OptionsConnectRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    passkeyRecoveryOptionsRaw(requestParameters: PasskeyRecoveryOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    passkeyRecoveryOptions(requestParameters: PasskeyRecoveryOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Endpoint to send minimal wallet information to the API to prefetch name service information for an address.
     * prefetch information for wallet address
     */
    prefetchRaw(requestParameters: PrefetchOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Endpoint to send minimal wallet information to the API to prefetch name service information for an address.
     * prefetch information for wallet address
     */
    prefetch(requestParameters: PrefetchOperationRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Publish events for SDK
     */
    publishEventRaw(requestParameters: PublishEventRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Publish events for SDK
     */
    publishEvent(requestParameters: PublishEventRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Endpoint to refresh the JWT auth token using the current valid JWT auth token in the authorization header
     */
    refreshAuthRaw(requestParameters: RefreshAuthRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Endpoint to refresh the JWT auth token using the current valid JWT auth token in the authorization header
     */
    refreshAuth(requestParameters: RefreshAuthRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    refreshOptionsRaw(requestParameters: RefreshOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    refreshOptions(requestParameters: RefreshOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Send new code for email verification
     */
    retryEmailVerificationRaw(requestParameters: RetryEmailVerificationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EmailVerificationCreateResponse>>;
    /**
     * Send new code for email verification
     */
    retryEmailVerification(requestParameters: RetryEmailVerificationRequest, initOverrides?: RequestInit): Promise<EmailVerificationCreateResponse>;
    /**
     * Options call for this endpoint
     */
    retryEmailVerificationOptionsRaw(requestParameters: RetryEmailVerificationOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    retryEmailVerificationOptions(requestParameters: RetryEmailVerificationOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Revoke a session
     */
    revokeSessionRaw(requestParameters: RevokeSessionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Revoke a session
     */
    revokeSession(requestParameters: RevokeSessionRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    revokeSessionOptionRaw(requestParameters: RevokeSessionOptionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    revokeSessionOption(requestParameters: RevokeSessionOptionRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     */
    sdkSettingsOptionsRaw(requestParameters: SdkSettingsOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     */
    sdkSettingsOptions(requestParameters: SdkSettingsOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    settingsOptionsRaw(requestParameters: SettingsOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    settingsOptions(requestParameters: SettingsOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Verify an email and sign in user
     */
    signInWithEmailVerificationRaw(requestParameters: SignInWithEmailVerificationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Verify an email and sign in user
     */
    signInWithEmailVerification(requestParameters: SignInWithEmailVerificationRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    signInWithEmailVerificationOptionsRaw(requestParameters: SignInWithEmailVerificationOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    signInWithEmailVerificationOptions(requestParameters: SignInWithEmailVerificationOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Update a passkey\'s info
     */
    updatePasskeyRaw(requestParameters: UpdatePasskeyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserPasskey>>;
    /**
     * Update a passkey\'s info
     */
    updatePasskey(requestParameters: UpdatePasskeyRequest, initOverrides?: RequestInit): Promise<UserPasskey>;
    /**
     * Update a user\'s fields
     */
    updateSelfRaw(requestParameters: UpdateSelfRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateSelfResponse>>;
    /**
     * Update a user\'s fields
     */
    updateSelf(requestParameters: UpdateSelfRequest, initOverrides?: RequestInit): Promise<UpdateSelfResponse>;
    /**
     * Options call for this endpoint
     */
    userPasskeysOptionsRaw(requestParameters: UserPasskeysOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    userPasskeysOptions(requestParameters: UserPasskeysOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    usersOptionsRaw(requestParameters: UsersOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    usersOptions(requestParameters: UsersOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Verify payload and return JWT
     */
    verifyRaw(requestParameters: VerifyOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Verify payload and return JWT
     */
    verify(requestParameters: VerifyOperationRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Verify email verification request
     */
    verifyEmailVerificationRaw(requestParameters: VerifyEmailVerificationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateSelfResponse>>;
    /**
     * Verify email verification request
     */
    verifyEmailVerification(requestParameters: VerifyEmailVerificationRequest, initOverrides?: RequestInit): Promise<UpdateSelfResponse>;
    /**
     * Options call for this endpoint
     */
    verifyEmailVerificationOptionsRaw(requestParameters: VerifyEmailVerificationOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    verifyEmailVerificationOptions(requestParameters: VerifyEmailVerificationOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Link a wallet to a valid environment user, and return an updated JWT
     * Link wallet to user
     */
    verifyLinkRaw(requestParameters: VerifyLinkRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Link a wallet to a valid environment user, and return an updated JWT
     * Link wallet to user
     */
    verifyLink(requestParameters: VerifyLinkRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    verifyLinkOptionsRaw(requestParameters: VerifyLinkOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    verifyLinkOptions(requestParameters: VerifyLinkOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    verifyOptionsRaw(requestParameters: VerifyOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    verifyOptions(requestParameters: VerifyOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    verifyPrefetchRaw(requestParameters: VerifyPrefetchRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    verifyPrefetch(requestParameters: VerifyPrefetchRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Used to link a wallet after user has confirmed transfer to the new account
     * Verify wallet transfer
     */
    verifyTransferRaw(requestParameters: VerifyTransferRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Used to link a wallet after user has confirmed transfer to the new account
     * Verify wallet transfer
     */
    verifyTransfer(requestParameters: VerifyTransferRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    verifyTransferOptionsRaw(requestParameters: VerifyTransferOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    verifyTransferOptions(requestParameters: VerifyTransferOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Remove a link from to a valid environment user, and return an updated JWT
     * unlink wallet from user
     */
    verifyUnlinkRaw(requestParameters: VerifyUnlinkOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Remove a link from to a valid environment user, and return an updated JWT
     * unlink wallet from user
     */
    verifyUnlink(requestParameters: VerifyUnlinkOperationRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    verifyUnlinkOptionsRaw(requestParameters: VerifyUnlinkOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    verifyUnlinkOptions(requestParameters: VerifyUnlinkOptionsRequest, initOverrides?: RequestInit): Promise<void>;
}
