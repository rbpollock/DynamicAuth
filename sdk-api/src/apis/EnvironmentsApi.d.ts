/**
 * Dashboard API
 * Dashboard API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { EnvironmentVisitorsResponse, EnvironmentsResponse, KeyResponse, ProjectEnvironment, ProjectSettings } from '../models';
export interface DeleteEnvironmentByIdRequest {
    environmentId: string;
}
export interface GetEnvironmentByIdRequest {
    environmentId: string;
}
export interface GetEnvironmentsByProjectIdRequest {
    projectId: string;
}
export interface GetKeysForEnvironmentRequest {
    environmentId: string;
}
export interface GetVisitorsCountByEnvironmentIdRequest {
    environmentId: string;
}
export interface UpdateProjectSettingsRequest {
    environmentId: string;
    projectSettings?: ProjectSettings;
}
/**
 *
 */
export declare class EnvironmentsApi extends runtime.BaseAPI {
    /**
     * Deletes an environment by ID
     */
    deleteEnvironmentByIdRaw(requestParameters: DeleteEnvironmentByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Deletes an environment by ID
     */
    deleteEnvironmentById(requestParameters: DeleteEnvironmentByIdRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Find an environment by ID
     */
    getEnvironmentByIdRaw(requestParameters: GetEnvironmentByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectEnvironment>>;
    /**
     * Find an environment by ID
     */
    getEnvironmentById(requestParameters: GetEnvironmentByIdRequest, initOverrides?: RequestInit): Promise<ProjectEnvironment>;
    /**
     * Get Live and Sandbox environments by projectId
     */
    getEnvironmentsByProjectIdRaw(requestParameters: GetEnvironmentsByProjectIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EnvironmentsResponse>>;
    /**
     * Get Live and Sandbox environments by projectId
     */
    getEnvironmentsByProjectId(requestParameters: GetEnvironmentsByProjectIdRequest, initOverrides?: RequestInit): Promise<EnvironmentsResponse>;
    /**
     * Get keys for an environment given environmentId
     */
    getKeysForEnvironmentRaw(requestParameters: GetKeysForEnvironmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<KeyResponse>>;
    /**
     * Get keys for an environment given environmentId
     */
    getKeysForEnvironment(requestParameters: GetKeysForEnvironmentRequest, initOverrides?: RequestInit): Promise<KeyResponse>;
    /**
     * Get the unique number of visitors for an environment by environment ID
     */
    getVisitorsCountByEnvironmentIdRaw(requestParameters: GetVisitorsCountByEnvironmentIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EnvironmentVisitorsResponse>>;
    /**
     * Get the unique number of visitors for an environment by environment ID
     */
    getVisitorsCountByEnvironmentId(requestParameters: GetVisitorsCountByEnvironmentIdRequest, initOverrides?: RequestInit): Promise<EnvironmentVisitorsResponse>;
    /**
     * Updates the environment settings
     */
    updateProjectSettingsRaw(requestParameters: UpdateProjectSettingsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectSettings>>;
    /**
     * Updates the environment settings
     */
    updateProjectSettings(requestParameters: UpdateProjectSettingsRequest, initOverrides?: RequestInit): Promise<ProjectSettings>;
}
