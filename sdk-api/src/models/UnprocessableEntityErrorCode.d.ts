/**
 * Dashboard API
 * Dashboard API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @enum {string}
 */
export declare enum UnprocessableEntityErrorCode {
    EmailAlreadyExists = "email_already_exists",
    AllowlistAlreadyExists = "allowlist_already_exists",
    AllowlistEntryAlreadyExists = "allowlist_entry_already_exists",
    ReassignWalletError = "reassign_wallet_error",
    ReassignWalletConfirm = "reassign_wallet_confirm",
    MembersCannotDeleteThemself = "members_cannot_delete_themself",
    UsernameAlreadyExists = "username_already_exists",
    WrongEmailVerificationToken = "wrong_email_verification_token",
    InvalidEmailVerification = "invalid_email_verification",
    TooManyEmailVerificationAttempts = "too_many_email_verification_attempts",
    OrganizationNameAlreadyExists = "organization_name_already_exists",
    ProjectNameAlreadyExists = "project_name_already_exists",
    WalletNotDeployed = "wallet_not_deployed",
    EmailVerificationRequired = "email_verification_required",
    InviteAddressRequired = "invite_address_required",
    ProviderNotAvailable = "provider_not_available",
    ForbiddenUnlinkRequest = "forbidden_unlink_request",
    InvalidUnlinkRequest = "invalid_unlink_request",
    TooManyApiTokens = "too_many_api_tokens",
    LockTimeout = "lock_timeout",
    LockTooManyAttempts = "lock_too_many_attempts",
    NftTokenGatingNotSupportedForChain = "nft_token_gating_not_supported_for_chain",
    EmptyChainName = "empty_chain_name",
    NoEnabledEmailProvider = "no_enabled_email_provider",
    InvalidKeyExportUrl = "invalid_key_export_url",
    InvalidDynamicProps = "invalid_dynamic_props",
    TooManyOrganizationsForUser = "too_many_organizations_for_user",
    TooManyProjectsForOrganization = "too_many_projects_for_organization",
    EmailAssociatedWithDifferentProvider = "email_associated_with_different_provider",
    UserHasAlreadyAccountWithEmail = "user_has_already_account_with_email",
    OtherVerifyFailure = "other_verify_failure",
    EmailTiedToEmbeddedWallet = "email_tied_to_embedded_wallet",
    InvalidInvite = "invalid_invite",
    SocialAccountAlreadyExists = "social_account_already_exists",
    InvalidEmailAddress = "invalid_email_address",
    ConflictingEmbeddedWalletProviders = "conflicting_embedded_wallet_providers",
    InvalidUser = "invalid_user",
    InvalidCorsOrigins = "invalid_cors_origins",
    InvalidPrivateKeyFormat = "invalid_private_key_format",
    InvalidEmbeddedWalletSettings = "invalid_embedded_wallet_settings",
    WalletNotSupportPasskey = "wallet_not_support_passkey",
    RecoveryEmailUnavailableOrInvalid = "recovery_email_unavailable_or_invalid",
    ConnectError = "connect_error",
    InvalidWalletName = "invalid_wallet_name",
    InvalidWalletAddress = "invalid_wallet_address",
    EmailRecoveryDisabled = "email_recovery_disabled",
    NoCompatibleWalletServiceEnabled = "no_compatible_wallet_service_enabled",
    MissingAaProjectId = "missing_aa_project_id",
    LinkedEmbeddedWallet = "linked_embedded_wallet"
}
export declare function UnprocessableEntityErrorCodeFromJSON(json: any): UnprocessableEntityErrorCode;
export declare function UnprocessableEntityErrorCodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): UnprocessableEntityErrorCode;
export declare function UnprocessableEntityErrorCodeToJSON(value?: UnprocessableEntityErrorCode | null): any;
